<?php
/******单链表 
 *1、 新建链表
 *2、 打印链表
 *3、 创建有环链表
 *4、 打印有环链表
 *5、链表反转
 *6、链表中环的检测
 *7、两个有序链表合并
 *8、删除链表倒数第n个节点
 *9、求链表的中间节点
 *******/
 

//链表节点
class ListNode
{
    public $next;
    public $value;
    public function __construct($value)
    {
        $this->next = null;
        $this->value = $value;
    }
}

/**
 * 链表添加节点
 * @param ListNode $head 链表表头
 * @param int $value 节点值
 */
function addNode(&$head, $value)
{
    $newNode = new ListNode($value);
    if ($head == null) {
        $head = $newNode;
    } else {
        $newNode->next = $head;
        $head = $newNode;
    }
}

/**
 * 打印链表
 * @param ListNode|null $head
 */
function printList($head)
{
    $p = $head;
    while ($p != null) {
        echo $p->value,'->';
        $p = $p->next;
    }
    echo "\n";
}

/**
 * @desc 创建有环形的链表
 * @param array $values 链表各个节点的值
 * @param int $loopIndex values数组里环的起点
 * @return NULL|list
 */
function createHasLoopList(array $values, $loopIndex)
{
    if (empty($values) || $loopIndex<0) {
        return null;
    }
    $len = count($values);//数组长度
    if ($loopIndex >= $len) {
        return null;
    }
    $loopListHead = null;//循环链表头
    $tail;//尾节点
    for ($i=0; $i<$len; ++$i) {
        $newNode = new ListNode($values[$i]);
        if ($loopIndex == $i) {
            $tail->next = $newNode;//尾节点指向循环节点形成环
        }
        if ($loopListHead == null) {
            $loopListHead = $newNode;
            $tail = $newNode;//尾节点
        } else {
            $newNode->next = $loopListHead;
            $loopListHead = $newNode;
        }
    }
    return $loopListHead;
}
/**
 * 打印循环列表
 * @param ListNode $loopListHead 循环链表
 * @param int $stopNum 控制打印个数避免死循环打印
 */
function printLoopList(ListNode $loopListHead, $stopNum)
{
    if ($loopListHead==null || $stopNum<=0) {
        return;
    }
    $num = 0;//记录打印次数
    $p = $loopListHead;
    while ($p != null) {
        echo $p->value."->";
        $p = $p->next;
        $num++;
        if ($num >= $stopNum) {
            break;
        }
    }
    echo "\n";
}
/**
 * 链表反转
 * @param ListNode $head 
 * @return ListNode
 */
function reversalList(ListNode $head)
{
    if ($head == null) {
        return true;
    }
    $p = $head;
    $pNext = $p->next;
    $p->next = null;
    while ($pNext != null) {
        $temp = $pNext->next;
        $pNext->next = $p;
        $p = $pNext;
        $pNext = $temp;
    }
    return $p;
}
/**
 * 链表中环的检测
 * @param ListNode $head
 * @return boolean
 */
function checkLoopList(ListNode $head)
{
    $p = $head;
    $pNext = $head;
    while ($p!=null && $pNext!=null) {
        $pNext = $pNext->next;
        if ($pNext != null) {
            $pNext = $pNext->next;
        }
        $p = $p->next;
        if ($p != null && $pNext!=null) {
            if ($p === $pNext) {
                return true;
            }
        }
    }
    return false;
}

/**
 * 检测是否为循环链表并打印出结果
 * @param ListNode $head
 */
function isLoopList(ListNode $head)
{
    if (checkLoopList($head)) {
        echo "is loop list \n";
    } else {
        echo "not loop list \n";
    }
}

/**
 * 顺序排序的两个链表合并为一个顺序排序的有序链表
 * @param null|ListNode $head1 第一个链表
 * @param null|ListNode $head2 第二个链表
 * @return null|ListNode
 */
function mergeSortList($head1, $head2)
{
    if ($head1==null && $head2==null) {
        return null;
    }
    if ($head1 == null) {
        return $head2;
    }
    if ($head2 == null) {
        return head1;
    }
    $newHead = null;
    $p1 = $head1;
    $p2 = $head2;
    if ($p1->value < $p2->value) {
        $newHead = $p1;
        $p1 = $p1->next;
    } else {
        $newHead = $p2;
        $p2 = $p2->next;
    }
    $p = $newHead;
    while ($p1!=null && $p2!=null) {
        if ($p1->value < $p2->value) {
            $p->next = $p1;
            $p1 = $p1->next;
        } else {
            $p->next = $p2;
            $p2 = $p2->next;
        }
        $p = $p->next;
    }
    if ($p1 != null) {
        $p->next = $p1;
    }
    if ($p2 != null) {
        $p->next = $p2;
    }
    return $newHead;
}

/**
 * 删除倒数第n个节点
 * @param ListNode|null $head 链表头结点
 * @param int $num 倒数第几个节点
 */
function deletedNNode(&$head, $num)
{
    //错误输入校验
    if ($head==null || $num<1) {
        return false;
    }
    $pNext = $head;//前指针，初始化时指向头结点
    $i = 0;//前指针向前走多少步计数器
    while ($i<$num && $pNext!=null) {
        $pNext = $pNext->next;
        ++$i;
    }
    if ($pNext == null) {//当前指针为空时有2种情况：1、链表里没有num个节点，2、链表里刚好有num个节点
        if ($i < $num) {//链表里没有num个节点，直接返回删除失败
            return false;
        } else if ($i == $num) {//链表里刚好有num个节点，删除头结点
            $temp = $head;
            $head = $head->next;
            unset($temp);
            return true;
        }
    }
    $p = $head;//后指针
    while ($pNext->next != null) {
        $p = $p->next;
        $pNext = $pNext->next;
    }
    $temp = $p->next;
    $p->next = $p->next->next;
    unset($temp);
    return true;
}

/**
 * 求链表的中间节点
 * @param null|ListNode $head 链表头结点
 * @return NULL|ListNode
 */
function findMiddleNode($head)
{
    if ($head==null || !($head instanceof ListNode)) {
        return null;
    }
    $later = $head;//后指针
    $front = $head->next;//前指针
    if ($front == null) {
        echo 'middle node '.$later->value."\n";
        return $later;
    }
    while ($front!=null && $front->next != null) {
        $front = $front->next;
        if ($front == null) {
            break;
        }
        $front = $front->next;
        $later = $later->next;
    }
    echo 'middle node '.$later->value."\n";
    return $later;
}
//新增几个链表节点
$head1 = null;
addNode($head1, 7);
addNode($head1, 5);
addNode($head1, 3);
addNode($head1, 1);
//打印链表
printList($head1);
//链表反转
$reversalList = reversalList($head1);
printList($reversalList);
//反转回来
reversalList($reversalList);
printList($head1);
//创建循环链表
$values = [9,8,7,6,5,4,3,2,1];
$loopList = createHasLoopList($values, 4);
printLoopList($loopList, 25);
//检测时候有环形链表
isLoopList($loopList);
isLoopList($head1);

//创建第二个链表
$head2 = null;
addNode($head2, 8);
addNode($head2, 6);
addNode($head2, 4);
addNode($head2, 2);
//打印链表
printList($head2);
//合并两个有序链表
$newSortList = mergeSortList($head1, $head2);
printList($newSortList);

//创建第3个链表
$head3 = null;
addNode($head3, 4);
addNode($head3, 3);
addNode($head3, 2);
addNode($head3, 1);
printList($head3);
//删除倒数第n个节点
if (deletedNNode($head3, 1)) {
    echo "delete success ";
} else {
    echo "delete faluse ";
}
printList($head3);

//创建第4个链表
$head4 = null;
addNode($head4, 9);
addNode($head4, 8);
addNode($head4, 7);
addNode($head4, 6);
addNode($head4, 5);
addNode($head4, 4);
addNode($head4, 3);
addNode($head4, 2);
addNode($head4, 1);
printList($head4);
findMiddleNode($head4);
